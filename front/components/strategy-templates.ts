import type { Edge } from "reactflow"

import type { CreateScratchBlockNodeArgs } from "@/components/scratch-block-node"

export type StrategyBlockTemplate = Omit<CreateScratchBlockNodeArgs, "onDataChange">

export const defaultStrategyTemplates: StrategyBlockTemplate[] = [
  {
    id: "block-sequence",
    position: { x: 40, y: 160 },
    title: "Sequence Stage",
    typeLabel: "Marker",
    variant: "marker",
    accentColor: "#0ea5e9",
    backgroundColor: "#0ea5e9",
    description: "Label this run as an entry or exit branch for quick scanning.",
    fields: [
      {
        key: "stage",
        label: "Stage",
        type: "select",
        options: [
          { label: "Entry", value: "entry" },
          { label: "Exit", value: "exit" },
        ],
      },
      { key: "note", label: "Note", type: "textarea", placeholder: "Optional context" },
    ],
    values: { stage: "entry", note: "" },
    inputs: [{ id: "sequence-marker-in", label: "Prev", side: "left", position: 0.5 }],
    outputs: [{ id: "sequence-marker-out", label: "Next", side: "right", position: 0.5 }],
  },
  {
    id: "block-entry",
    position: { x: 436, y: 160 },
    title: "Wallet Threshold",
    typeLabel: "Trigger",
    accentColor: "#0ea5e9",
    backgroundColor: "#0ea5e9",
    description: "Start when the wallet balance crosses a defined minimum.",
    fields: [
      { key: "asset", label: "Asset", type: "text", placeholder: "USDC" },
      {
        key: "threshold",
        label: "Min Balance",
        type: "number",
        helperText: "Amount required before execution begins.",
      },
    ],
    values: { asset: "USDC", threshold: 1000 },
    inputs: [{ id: "entry-in", label: "Start", side: "left", position: 0.5 }],
    outputs: [{ id: "entry-out", label: "Next", side: "right", position: 0.5 }],
  },
  {
    id: "block-swap",
    position: { x: 832, y: 160 },
    title: "Swap Asset",
    typeLabel: "Action",
    accentColor: "#6366f1",
    backgroundColor: "#6366f1",
    description: "Execute a swap on the preferred pool.",
    fields: [
      { key: "from_token", label: "From Token", type: "text", placeholder: "ALGO" },
      { key: "to_token", label: "To Token", type: "text", placeholder: "gALGO" },
      {
        key: "amount", label: "Amount", type: "number", helperText: "Amount to swap." },
      {
        key: "amount_unit", label: "Unit", type: "select", options: [
          { label: "Human", value: "human" },
          { label: "Atomic", value: "atomic" },
        ]
      },
    ],
    values: { from_token: "ALGO", to_token: "gALGO", amount: 50, amount_unit: "human" },
    inputs: [{ id: "swap-in", label: "Input", side: "left", position: 0.5 }],
    outputs: [
      { id: "swap-success", label: "Success", side: "right", position: 0.35 },
      { id: "swap-fallback", label: "Fallback", side: "right", position: 0.75 },
    ],
  },
  {
    id: "block-stake",
    position: { x: 1228, y: 160 },
    title: "Provide Liquidity",
    typeLabel: "Strategy",
    accentColor: "#f97316",
    backgroundColor: "#f97316",
    description: "Deposit into the vault and stake LP tokens.",
    fields: [
      {
        key: "token_a", label: "Token A", type: "text", placeholder: "ALGO" },
      {
        key: "token_b", label: "Token B", type: "text", placeholder: "USDC" },
      {
        key: "amount_a", label: "Amount A", type: "number" },
      {
        key: "amount_b", label: "Amount B", type: "number" },
      {
        key: "slippage_bps", label: "Slippage (bps)", type: "number", helperText: "Basis points (1% = 100bps)" },
    ],
    values: { token_a: "ALGO", token_b: "USDC", amount_a: 0, amount_b: 0, slippage_bps: 50 },
    inputs: [
      { id: "stake-in", label: "Assets", side: "left", position: 0.45 },
      { id: "stake-topup", label: "Top-up", side: "left", position: 0.75 },
    ],
    outputs: [{ id: "stake-out", label: "Yield", side: "right", position: 0.5 }],
  },
]

export const defaultStrategyEdges: Edge[] = [
  {
    id: "edge-marker-entry",
    source: "block-sequence",
    target: "block-entry",
    sourceHandle: "sequence-marker-out",
    targetHandle: "entry-in",
    type: "smoothstep",
    animated: true,
  },
  {
    id: "edge-entry-swap",
    source: "block-entry",
    target: "block-swap",
    sourceHandle: "entry-out",
    targetHandle: "swap-in",
    type: "smoothstep",
    animated: true,
  },
  {
    id: "edge-swap-stake",
    source: "block-swap",
    target: "block-stake",
    sourceHandle: "swap-success",
    targetHandle: "stake-in",
    type: "smoothstep",
    animated: true,
  },
]

export const strategyPaletteTemplates: Record<string, StrategyBlockTemplate> = {
  "wallet-1": {
    id: "wallet-trigger",
    position: { x: 0, y: 0 },
    title: "Wallet Trigger",
    typeLabel: "Wallet",
  accentColor: "#0ea5e9",
  backgroundColor: "#0ea5e9",
    description: "Watch a wallet address and emit when balance changes.",
    fields: [
      { key: "address", label: "Address", type: "text", placeholder: "0xABC..." },
      { key: "minBalance", label: "Min Balance", type: "number" },
    ],
    values: { address: "", minBalance: 0 },
  inputs: [{ id: "wallet-in", label: "Start", side: "left", position: 0.5 }],
  outputs: [{ id: "wallet-out", label: "Next", side: "right", position: 0.5 }],
  },
  "wallet-2": {
    id: "wallet-multisig",
    position: { x: 0, y: 0 },
    title: "Multi-Sig Check",
    typeLabel: "Wallet",
  accentColor: "#14b8a6",
  backgroundColor: "#14b8a6",
    description: "Require approvals from multiple signers before execution.",
    fields: [
      { key: "signers", label: "Signers", type: "textarea", placeholder: "addr1, addr2" },
      { key: "quorum", label: "Quorum", type: "number", helperText: "Number of signatures required." },
    ],
    values: { signers: "", quorum: 2 },
  inputs: [{ id: "multisig-in", label: "Input", side: "left", position: 0.5 }],
  outputs: [{ id: "multisig-out", label: "Approved", side: "right", position: 0.5 }],
  },
  "contract-1": {
    id: "contract-generic",
    position: { x: 0, y: 0 },
    title: "Smart Contract Call",
    typeLabel: "Contract",
  accentColor: "#6366f1",
  backgroundColor: "#6366f1",
    description: "Invoke a read/write contract function with parameters.",
    fields: [
      { key: "contract", label: "Contract", type: "text", placeholder: "Contract name" },
      { key: "method", label: "Method", type: "text", placeholder: "methodName" },
      { key: "arguments", label: "Arguments", type: "textarea", placeholder: "arg1, arg2" },
    ],
    values: { contract: "", method: "", arguments: "" },
    inputs: [
      { id: "contract-in", label: "Invoke", side: "left", position: 0.45 },
      { id: "contract-params", label: "Params", side: "left", position: 0.75 },
    ],
    outputs: [
      { id: "contract-success", label: "Success", side: "right", position: 0.35 },
      { id: "contract-fail", label: "Fail", side: "right", position: 0.75 },
    ],
  },
  "contract-2": {
    id: "contract-erc20",
    position: { x: 0, y: 0 },
    title: "ERC-20 Interaction",
    typeLabel: "Contract",
    accentColor: "#8b5cf6",
    backgroundColor: "#8b5cf6",
    description: "Interact with standard ERC-20 token functions.",
    fields: [
      { key: "token", label: "Token", type: "text", placeholder: "Token address" },
      {
        key: "operation",
        label: "Operation",
        type: "select",
        options: [
          { label: "transfer", value: "transfer" },
          { label: "approve", value: "approve" },
          { label: "mint", value: "mint" },
        ],
      },
      { key: "amount", label: "Amount", type: "number" },
    ],
    values: { token: "", operation: "transfer", amount: 0 },
  inputs: [{ id: "erc20-in", label: "Token", side: "left", position: 0.5 }],
  outputs: [{ id: "erc20-out", label: "Next", side: "right", position: 0.5 }],
  },
  "contract-3": {
    id: "contract-erc721",
    position: { x: 0, y: 0 },
    title: "NFT Action",
    typeLabel: "Contract",
    accentColor: "#a855f7",
    backgroundColor: "#a855f7",
    description: "Manage assets in an ERC-721 contract.",
    fields: [
      { key: "collection", label: "Collection", type: "text", placeholder: "Collection address" },
      { key: "tokenId", label: "Token ID", type: "number" },
      {
        key: "action",
        label: "Action",
        type: "select",
        options: [
          { label: "transferFrom", value: "transfer" },
          { label: "safeTransferFrom", value: "safe-transfer" },
          { label: "approve", value: "approve" },
        ],
      },
    ],
    values: { collection: "", tokenId: 0, action: "transfer" },
  inputs: [{ id: "erc721-in", label: "NFT", side: "left", position: 0.5 }],
  outputs: [{ id: "erc721-out", label: "Next", side: "right", position: 0.5 }],
  },
  "token-1": {
    id: "token-transfer",
    position: { x: 0, y: 0 },
    title: "Token Transfer",
    typeLabel: "Token",
    accentColor: "#f97316",
    backgroundColor: "#f97316",
    description: "Send tokens between accounts with slippage guard.",
    fields: [
      { key: "token", label: "Token", type: "text", placeholder: "Symbol" },
      { key: "recipient", label: "Recipient", type: "text", placeholder: "0x..." },
      { key: "amount", label: "Amount", type: "number" },
    ],
    values: { token: "", recipient: "", amount: 0 },
  inputs: [{ id: "transfer-in", label: "Asset", side: "left", position: 0.5 }],
  outputs: [{ id: "transfer-out", label: "Sent", side: "right", position: 0.5 }],
  },
  "token-2": {
    id: "token-approval",
    position: { x: 0, y: 0 },
    title: "Token Approval",
    typeLabel: "Token",
    accentColor: "#fb923c",
    backgroundColor: "#fb923c",
    description: "Authorize a contract to spend tokens on behalf of a wallet.",
    fields: [
      { key: "spender", label: "Spender", type: "text", placeholder: "Contract" },
      { key: "limit", label: "Allowance", type: "number" },
    ],
    values: { spender: "", limit: 0 },
  inputs: [{ id: "approval-in", label: "Owner", side: "left", position: 0.5 }],
  outputs: [{ id: "approval-out", label: "Approved", side: "right", position: 0.5 }],
  },
  "function-1": {
    id: "function-call",
    position: { x: 0, y: 0 },
    title: "Function Call",
    typeLabel: "Function",
    accentColor: "#22d3ee",
    backgroundColor: "#22d3ee",
    description: "Trigger an arbitrary function with typed arguments.",
    fields: [
      { key: "module", label: "Module", type: "text", placeholder: "Module" },
      { key: "fn", label: "Function", type: "text", placeholder: "fnName" },
      { key: "args", label: "Args", type: "textarea", placeholder: "arg1, arg2" },
    ],
    values: { module: "", fn: "", args: "" },
  inputs: [{ id: "function-in", label: "Input", side: "left", position: 0.5 }],
  outputs: [{ id: "function-out", label: "Result", side: "right", position: 0.5 }],
  },
  "defi-1": {
    id: "defi-swap",
    position: { x: 0, y: 0 },
    title: "Swap",
    typeLabel: "DeFi",
    accentColor: "#facc15",
    backgroundColor: "#facc15",
    description: "Swap tokens on a decentralized exchange.",
    fields: [
      { key: "from", label: "From", type: "text", placeholder: "ALGO" },
      { key: "to", label: "To", type: "text", placeholder: "USDC" },
      { key: "slippage", label: "Slippage", type: "number" },
    ],
    values: { from: "ALGO", to: "USDC", slippage: 1 },
    inputs: [{ id: "defi-swap-in", label: "Assets", side: "left", position: 0.5 }],
    outputs: [
      { id: "defi-swap-success", label: "Success", side: "right", position: 0.35 },
      { id: "defi-swap-fail", label: "Fail", side: "right", position: 0.75 },
    ],
  },
  "defi-2": {
    id: "defi-liquidity",
    position: { x: 0, y: 0 },
    title: "Provide Liquidity",
    typeLabel: "DeFi",
    accentColor: "#38bdf8",
    backgroundColor: "#38bdf8",
    description: "Deposit asset pairs into a DEX pool.",
    fields: [
      { key: "pool", label: "Pool", type: "select", options: [
        { label: "ALGO/USDC", value: "algo-usdc" },
        { label: "gALGO/ALGO", value: "galgo-algo" },
        { label: "USDC/USDT", value: "usdc-usdt" },
      ] },
      { key: "amountA", label: "Amount A", type: "number" },
      { key: "amountB", label: "Amount B", type: "number" },
    ],
    values: { pool: "algo-usdc", amountA: 0, amountB: 0 },
    inputs: [
      { id: "defi-liquidity-in", label: "Funds", side: "left", position: 0.45 },
      { id: "defi-liquidity-extra", label: "Boost", side: "left", position: 0.75 },
    ],
    outputs: [{ id: "defi-liquidity-out", label: "LP", side: "right", position: 0.5 }],
  },
  "defi-3": {
    id: "defi-lend",
    position: { x: 0, y: 0 },
    title: "Lend",
    typeLabel: "DeFi",
    accentColor: "#34d399",
    backgroundColor: "#34d399",
    description: "Supply assets to earn variable yield.",
    fields: [
      { key: "asset", label: "Asset", type: "text", placeholder: "Stablecoin" },
      { key: "amount", label: "Amount", type: "number" },
      { key: "protocol", label: "Protocol", type: "text", placeholder: "Aave" },
    ],
    values: { asset: "", amount: 0, protocol: "" },
  inputs: [{ id: "defi-lend-in", label: "Funds", side: "left", position: 0.5 }],
  outputs: [{ id: "defi-lend-out", label: "Yield", side: "right", position: 0.5 }],
  },
  "defi-4": {
    id: "defi-borrow",
    position: { x: 0, y: 0 },
    title: "Borrow",
    typeLabel: "DeFi",
    accentColor: "#f97316",
    backgroundColor: "#f97316",
    description: "Borrow assets against collateral with safety margin.",
    fields: [
      { key: "collateral", label: "Collateral", type: "text", placeholder: "gALGO" },
      { key: "loan", label: "Borrow", type: "number" },
      { key: "health", label: "Health Factor", type: "number" },
    ],
    values: { collateral: "", loan: 0, health: 1.5 },
  inputs: [{ id: "defi-borrow-in", label: "Collateral", side: "left", position: 0.5 }],
  outputs: [{ id: "defi-borrow-out", label: "Debt", side: "right", position: 0.5 }],
  },
  "defi-5": {
    id: "defi-stake",
    position: { x: 0, y: 0 },
    title: "Stake",
    typeLabel: "DeFi",
    accentColor: "#f87171",
    backgroundColor: "#f87171",
    description: "Stake tokens to secure network rewards.",
    fields: [
      { key: "validator", label: "Validator", type: "text", placeholder: "Validator" },
      { key: "amount", label: "Amount", type: "number" },
      { key: "duration", label: "Duration (days)", type: "number" },
    ],
    values: { validator: "", amount: 0, duration: 30 },
  inputs: [{ id: "defi-stake-in", label: "Tokens", side: "left", position: 0.5 }],
  outputs: [{ id: "defi-stake-out", label: "Rewards", side: "right", position: 0.5 }],
  },
  "logic-conditional-wrapper": {
    id: "conditional-wrapper",
    position: { x: 0, y: 0 },
    title: "Conditional Wrapper",
    typeLabel: "Condition",
    variant: "tall",
    accentColor: "#a855f7",
    backgroundColor: "#a855f7",
    description: "Enclose the sequence with a guard and branch on pass or fail outcomes.",
    fields: [
      {
        key: "source",
        label: "Signal Source",
        type: "select",
        options: [
          { label: "Oracle", value: "oracle" },
          { label: "Protocol Health", value: "health" },
          { label: "Custom Metric", value: "custom" },
        ],
      },
      {
        key: "operator",
        label: "Operator",
        type: "select",
        options: [
          { label: ">=", value: "gte" },
          { label: "<=", value: "lte" },
          { label: "==", value: "eq" },
        ],
      },
      { key: "target", label: "Target", type: "number" },
      { key: "window", label: "Lookback Window", type: "text", placeholder: "30m" },
      { key: "notes", label: "Notes", type: "textarea", placeholder: "Explain how this gate works" },
    ],
    values: { source: "oracle", operator: "gte", target: 0, window: "30m", notes: "" },
    inputs: [
      { id: "conditional-wrapper-in", label: "Flow", side: "left", position: 0.5 },
      { id: "conditional-wrapper-check", label: "Guard", side: "top", position: 0.4 },
    ],
    outputs: [
      { id: "conditional-wrapper-true", label: "If True", side: "right", position: 0.35 },
      { id: "conditional-wrapper-false", label: "If False", side: "right", position: 0.7 },
    ],
  },
  "marker-1": {
    id: "sequence-marker",
    position: { x: 0, y: 0 },
    title: "Sequence Stage",
    typeLabel: "Marker",
    variant: "marker",
    accentColor: "#0ea5e9",
    backgroundColor: "#0ea5e9",
    description: "Tag blocks as entry or exit stages for quick scanning.",
    fields: [
      {
        key: "stage",
        label: "Stage",
        type: "select",
        options: [
          { label: "Entry", value: "entry" },
          { label: "Exit", value: "exit" },
        ],
      },
      { key: "note", label: "Note", type: "textarea", placeholder: "Optional context" },
    ],
    values: { stage: "entry", note: "" },
    inputs: [{ id: "sequence-marker-in", label: "Prev", side: "left", position: 0.5 }],
    outputs: [{ id: "sequence-marker-out", label: "Next", side: "right", position: 0.5 }],
  },
  "storage-1": {
    id: "storage-write",
    position: { x: 0, y: 0 },
    title: "Store Data",
    typeLabel: "Storage",
    accentColor: "#f59e0b",
    backgroundColor: "#f59e0b",
    description: "Persist key metrics on-chain or in IPFS.",
    fields: [
      { key: "key", label: "Key", type: "text", placeholder: "metric" },
      { key: "value", label: "Value", type: "textarea", placeholder: "42" },
      {
        key: "storage",
        label: "Medium",
        type: "select",
        options: [
          { label: "On-chain", value: "onchain" },
          { label: "IPFS", value: "ipfs" },
          { label: "Arweave", value: "arweave" },
        ],
      },
    ],
    values: { key: "metric", value: "", storage: "onchain" },
  inputs: [{ id: "storage-in", label: "Input", side: "left", position: 0.5 }],
  outputs: [{ id: "storage-out", label: "Stored", side: "right", position: 0.5 }],
  },
}
